#!/usr/bin/env bash

# Ensure a plugin package is good for publishing.
#
# Usage:
#
#     $0 PACKAGE [-S "lint"|"test"|"build"[, -S ...]]
#
# This script will perform the following:
#
#   - install NPM packages and make sure they're up to date
#   - (optional, -S lint to skip) lint the back-end and UI sources
#   - (optional, -S test to skip) run the back-end tests
#   - (optional, -S build to skip) compile the plugin's UI assets
#
# Environment variables:
#
#   - PACKAGE: the package, in case $1 is not passed

[ -f "./package.json" ] && grep '"name": "megadoc"' ./package.json &> /dev/null || {
  [ -f "../../package.json" ] && grep '"name": "megadoc"' ../../package.json &> /dev/null && {
    # echo "$0: re-running from megadoc root"

    cd ../../
    exec ./bin/prepublish $@
    exit $?
  }

  echo "$0: Must be run from megadoc root.";
  exit 1
}

which jq &> /dev/null || {
  echo "$0: jq must be installed"
  exit 1
}

source "bin/_helpers.sh"

if [[ -z $PACKAGE && -z $LERNA_PACKAGE_NAME && -z $npm_package_name ]]; then
  if [ $# -gt 0 ]; then
    PACKAGE=$1
    shift
  fi

  if [ -z $PACKAGE ]; then
    echo "Usage: $0 PACKAGE"
    exit 1
  fi
fi

PACKAGE_NAME="${PACKAGE:-${LERNA_PACKAGE_NAME:-$npm_package_name}}"
PACKAGE_ROOT="packages/${PACKAGE_NAME}"
PROVIDED_UI_LIBRARIES="react"
IGNORED=()

if [ ! -d "${PACKAGE_ROOT}" ]; then
  PACKAGE_NAME="megadoc-plugin-${PACKAGE}"
  PACKAGE_ROOT="packages/${PACKAGE_NAME}"

  if [ ! -d "${PACKAGE_ROOT}" ]; then
    echo "${PACKAGE_NAME} is not a valid megadoc plugin package."
    exit 1
  fi
fi

function ensure_no_unlisted_dependencies {
  [ -f $PACKAGE_ROOT/package.json ] && {
    out=$(
      ./node_modules/.bin/depcheck \
        $PACKAGE_ROOT \
        --json \
        --ignore-dirs="tmp,test_helpers,lib--legacy,ui,doc"
      )

    # for some reason the --ignores flag is, well, being ignored by depcheck
    # so we resort to doing this manually in JS land:
    node -e "
      var deps = JSON.parse(process.argv[1]);
      var missingDeps = Object.keys(deps.missing || {});

      if (missingDeps.length > 0) {
        console.error('Missing dependencies:', missingDeps.map(function(x) { return '\n  * ' + x; }).join(''));
        process.exit(1);
      }
    " "${out}"

    return $?
  }
}

function lint_sources {
  ./bin/lint $PACKAGE_NAME
}

function lint_ui_sources {
  ./bin/lint-ui $PACKAGE_NAME
}

function run_tests {
  ./bin/test $PACKAGE_NAME --reporter dot
}

function build_assets {
  build_script=$(cat $PACKAGE_ROOT/package.json | jq -e -r '.scripts.build')

  if [ $build_script == 'null' ]
  then
    if [ ! -f $PACKAGE_ROOT/ui/index.js ]; then
      echo "Package has no UI assets to compile - nothing to do!"
      return 0
    fi

    if [ -d $PACKAGE_ROOT/dist ]; then
      echo "Cleaning previous build artifacts..."
      rm -r $PACKAGE_ROOT/dist
    fi

    ./packages/megadoc-cli/bin/megadoc-build-html-plugin.js --optimize \
      "${PACKAGE_ROOT}/dist/${PACKAGE_NAME}.js" \
      "${PACKAGE_ROOT}/ui/index.js"
  else
    (cd $PACKAGE_ROOT; npm run build)
  fi
}

echo "Preparing \"${PACKAGE_NAME}\" for publishing... hang on tight."
echo "---------------------------------------------------------------"

declare -a IGNORED=()

function should_run() {
  if [[ " ${IGNORED[@]} " =~ " $1 " ]]; then
    return 1
  else
    return 0
  fi
}

while getopts ":S:O:" opt; do
  case $opt in
    S)
      IGNORED+=("${OPTARG}")
      ;;
    O)
      declare -a steps=('check' 'lint' 'test' 'build')

      for step in ${steps[@]}; do
        if [ "${step}" != "${OPTARG}" ]; then
          IGNORED=("${IGNORED[@]}" "${step}")
        fi
      done

      unset steps
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

should_run "check" && run_task ensure_no_unlisted_dependencies
should_run "lint" && run_task lint_sources && run_task lint_ui_sources
should_run "test" && run_task run_tests $@
should_run "build" && run_task build_assets

echo "Package \"${PACKAGE_NAME}\" is good for publishing, nice work!"
echo "---------------------------------------------------------------"
